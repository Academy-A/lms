version: '3.8'
services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped

  backend:
    restart: unless-stopped
    build:
      dockerfile: ./docker/backend/backend.dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      SOHO_API_TOKEN: ${SOHO_API_TOKEN}
      SECRET_KEY: ${SECRET_KEY}

    ports:
      - 8000:80

  worker:
    restart: unless-stopped
    build:
      dockerfile: ./docker/backend/worker.dockerfile
    depends_on:
      - backend
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      SOHO_API_TOKEN: ${SOHO_API_TOKEN}
      SECRET_KEY: ${SECRET_KEY}

  cron:
    restart: unless-stopped
    build:
      dockerfile: ./docker/cron/cron.dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      SOHO_API_TOKEN: ${SOHO_API_TOKEN}
      SECRET_KEY: ${SECRET_KEY}

volumes:
  postgres_data:
